{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-30T20:24:25.519Z",
    "end": "2024-03-30T20:24:25.543Z",
    "duration": 24,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9e2bf9a9-9745-493f-85ac-7f7532df4401",
      "title": "",
      "fullFile": "C:\\Users\\TikoAbuladze\\Desktop\\Task_Unit_Tests\\test\\numbers-validator\\unittests.spec.js",
      "file": "\\test\\numbers-validator\\unittests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "66a3fbcd-f5e8-4ef8-b5db-ba4fc4c7b7d1",
          "title": "getEventNumbersFromArray",
          "fullFile": "C:\\Users\\TikoAbuladze\\Desktop\\Task_Unit_Tests\\test\\numbers-validator\\unittests.spec.js",
          "file": "\\test\\numbers-validator\\unittests.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEventNumbersFromArray\"",
              "fullTitle": "getEventNumbersFromArray \"before each\" hook in \"getEventNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "b9f12568-ae8f-4933-b41f-29a88f77784b",
              "parentUUID": "66a3fbcd-f5e8-4ef8-b5db-ba4fc4c7b7d1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEventNumbersFromArray\"",
              "fullTitle": "getEventNumbersFromArray \"after each\" hook in \"getEventNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "f21b7bbf-b3aa-46cf-9c43-0f500b0b7303",
              "parentUUID": "66a3fbcd-f5e8-4ef8-b5db-ba4fc4c7b7d1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "getEventNumbersFromArray should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "e20f83cf-56b6-4225-8740-a8487cab1e77",
              "parentUUID": "66a3fbcd-f5e8-4ef8-b5db-ba4fc4c7b7d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an odd number",
              "fullTitle": "getEventNumbersFromArray should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "395ca3ac-3bd4-4610-87a3-a107b82d6ad4",
              "parentUUID": "66a3fbcd-f5e8-4ef8-b5db-ba4fc4c7b7d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when passed value is not typeof number",
              "fullTitle": "getEventNumbersFromArray should throw an error when passed value is not typeof number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isNumberEven).to.throw()",
              "err": {},
              "uuid": "1f6119ac-6c06-4b2a-99f6-e9f03dbe0ceb",
              "parentUUID": "66a3fbcd-f5e8-4ef8-b5db-ba4fc4c7b7d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return an array of even numbers",
              "fullTitle": "getEventNumbersFromArray Should return an array of even numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arr = [3, 4, 8, 11, 24, 20];\nconst evenNumbersfromArray = validator.getEvenNumbersFromArray(arr);\nexpect(evenNumbersfromArray).to.be.deep.eq([4, 8, 24, 20]);",
              "err": {},
              "uuid": "4024da26-2e7e-44e6-aa7f-694a0d734061",
              "parentUUID": "66a3fbcd-f5e8-4ef8-b5db-ba4fc4c7b7d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided an array of all numbers",
              "fullTitle": "getEventNumbersFromArray should return true when provided an array of all numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [3, 4, 8, 11, 24, 20];\nexpect(validator.isAllNumbers(arrayOfNumbers)).to.be.true;",
              "err": {},
              "uuid": "d8342dd8-0375-417d-be98-826a46c7d527",
              "parentUUID": "66a3fbcd-f5e8-4ef8-b5db-ba4fc4c7b7d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when passed value is not array of numbers",
              "fullTitle": "getEventNumbersFromArray Should throw an error when passed value is not array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arr = [\"3\", \"4\", 8, 11, 24, 20];\nconst result = validator.getEvenNumbersFromArray.bind(this, arr);\nexpect(result).to.throw(`[${arr}] is not an array of \"Numbers\"`);",
              "err": {},
              "uuid": "34a185e1-71c2-4327-97b6-19bbd9cfe7b1",
              "parentUUID": "66a3fbcd-f5e8-4ef8-b5db-ba4fc4c7b7d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when passed value is not an array",
              "fullTitle": "getEventNumbersFromArray Should throw an error when passed value is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const i = {name: 'tiko'};\nexpect(() => validator.isAllNumbers(i)).to.throw(`[${i}] is not an array`);",
              "err": {},
              "uuid": "13eba99c-b92f-499e-8cad-f0f90354ae0a",
              "parentUUID": "66a3fbcd-f5e8-4ef8-b5db-ba4fc4c7b7d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true when passed value is integer",
              "fullTitle": "getEventNumbersFromArray Should return true when passed value is integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const i = 9;\nexpect(validator.isInteger(i)).to.be.true;",
              "err": {},
              "uuid": "fe63726c-8275-4221-810f-f9d0e95ba5c1",
              "parentUUID": "66a3fbcd-f5e8-4ef8-b5db-ba4fc4c7b7d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when passed value is not integer",
              "fullTitle": "getEventNumbersFromArray Should throw an error when passed value is not integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const i = \"A\";\nexpect(()=> validator.isInteger(i)).to.throw(`[${i}] is not a number`)",
              "err": {},
              "uuid": "4c54d81f-f99f-4b5d-8e24-2b1c581b300b",
              "parentUUID": "66a3fbcd-f5e8-4ef8-b5db-ba4fc4c7b7d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e20f83cf-56b6-4225-8740-a8487cab1e77",
            "395ca3ac-3bd4-4610-87a3-a107b82d6ad4",
            "1f6119ac-6c06-4b2a-99f6-e9f03dbe0ceb",
            "4024da26-2e7e-44e6-aa7f-694a0d734061",
            "d8342dd8-0375-417d-be98-826a46c7d527",
            "34a185e1-71c2-4327-97b6-19bbd9cfe7b1",
            "13eba99c-b92f-499e-8cad-f0f90354ae0a",
            "fe63726c-8275-4221-810f-f9d0e95ba5c1",
            "4c54d81f-f99f-4b5d-8e24-2b1c581b300b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}