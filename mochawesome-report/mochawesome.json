{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-01T19:54:14.115Z",
    "end": "2024-04-01T19:54:14.124Z",
    "duration": 9,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ca31cebd-cc56-4e5e-a3bc-d64361d561f7",
      "title": "",
      "fullFile": "C:\\Users\\TikoAbuladze\\Desktop\\Task_Unit_Tests\\test\\numbers-validator\\unittests.spec.js",
      "file": "\\test\\numbers-validator\\unittests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "43fae588-ecc1-4d5b-b839-026786a09e12",
          "title": "getEventNumbersFromArray",
          "fullFile": "C:\\Users\\TikoAbuladze\\Desktop\\Task_Unit_Tests\\test\\numbers-validator\\unittests.spec.js",
          "file": "\\test\\numbers-validator\\unittests.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEventNumbersFromArray\"",
              "fullTitle": "getEventNumbersFromArray \"before each\" hook in \"getEventNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "9149d2ff-0354-4953-820b-5d6b5b8fa519",
              "parentUUID": "43fae588-ecc1-4d5b-b839-026786a09e12",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEventNumbersFromArray\"",
              "fullTitle": "getEventNumbersFromArray \"after each\" hook in \"getEventNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "4613769e-9737-4203-af59-7782bd2a155e",
              "parentUUID": "43fae588-ecc1-4d5b-b839-026786a09e12",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "getEventNumbersFromArray should return true when provided with an even number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "a6b15a67-3aac-4554-a45f-6f2d3c40d797",
              "parentUUID": "43fae588-ecc1-4d5b-b839-026786a09e12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an odd number",
              "fullTitle": "getEventNumbersFromArray should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "7dd47c07-ccbf-413a-822e-d994d8fdbabf",
              "parentUUID": "43fae588-ecc1-4d5b-b839-026786a09e12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when passed value is not typeof number",
              "fullTitle": "getEventNumbersFromArray should throw an error when passed value is not typeof number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isNumberEven).to.throw();",
              "err": {},
              "uuid": "1c53c28b-dd99-4229-a3e8-cabb1233ccf3",
              "parentUUID": "43fae588-ecc1-4d5b-b839-026786a09e12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return an array of even numbers",
              "fullTitle": "getEventNumbersFromArray Should return an array of even numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arr = [3, 4, 8, 11, 24, 20];\nconst evenNumbersfromArray = validator.getEvenNumbersFromArray(arr);\nexpect(evenNumbersfromArray).to.be.deep.eq([4, 8, 24, 20]);",
              "err": {},
              "uuid": "e7ba6595-a98e-4384-96d2-8688e295fdaf",
              "parentUUID": "43fae588-ecc1-4d5b-b839-026786a09e12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided an array of all numbers",
              "fullTitle": "getEventNumbersFromArray should return true when provided an array of all numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [3, 4, 8, 11, 24, 20];\nexpect(validator.isAllNumbers(arrayOfNumbers)).to.be.true;",
              "err": {},
              "uuid": "9888e4b8-77cb-4c1d-9d94-1b06e8c2ef44",
              "parentUUID": "43fae588-ecc1-4d5b-b839-026786a09e12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when passed value is not array of numbers",
              "fullTitle": "getEventNumbersFromArray Should throw an error when passed value is not array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arr = ['3', '4', 8, 11, 24, 20];\nconst result = validator.getEvenNumbersFromArray.bind(null, arr);\nexpect(result).to.throw(`[${arr}] is not an array of \"Numbers\"`);",
              "err": {},
              "uuid": "c002e789-6e6c-4fe8-9c19-872437d9f56a",
              "parentUUID": "43fae588-ecc1-4d5b-b839-026786a09e12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when passed value is not an array",
              "fullTitle": "getEventNumbersFromArray Should throw an error when passed value is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const i = {name: 'tiko'};\nexpect(() => validator.isAllNumbers(i)).to.throw(`[${i}] is not an array`);",
              "err": {},
              "uuid": "5da1a1da-01e9-45c8-b78e-8c71ccab5726",
              "parentUUID": "43fae588-ecc1-4d5b-b839-026786a09e12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true when passed value is integer",
              "fullTitle": "getEventNumbersFromArray Should return true when passed value is integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const i = 9;\nexpect(validator.isInteger(i)).to.be.true;",
              "err": {},
              "uuid": "763b0e96-39c2-4b22-ab80-964bea8befae",
              "parentUUID": "43fae588-ecc1-4d5b-b839-026786a09e12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when passed value is not integer",
              "fullTitle": "getEventNumbersFromArray Should throw an error when passed value is not integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const i = 'A';\nexpect(()=> validator.isInteger(i)).to.throw(`[${i}] is not a number`);",
              "err": {},
              "uuid": "715fc0be-2a99-4fc0-a4b0-97dfc941a203",
              "parentUUID": "43fae588-ecc1-4d5b-b839-026786a09e12",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6b15a67-3aac-4554-a45f-6f2d3c40d797",
            "7dd47c07-ccbf-413a-822e-d994d8fdbabf",
            "1c53c28b-dd99-4229-a3e8-cabb1233ccf3",
            "e7ba6595-a98e-4384-96d2-8688e295fdaf",
            "9888e4b8-77cb-4c1d-9d94-1b06e8c2ef44",
            "c002e789-6e6c-4fe8-9c19-872437d9f56a",
            "5da1a1da-01e9-45c8-b78e-8c71ccab5726",
            "763b0e96-39c2-4b22-ab80-964bea8befae",
            "715fc0be-2a99-4fc0-a4b0-97dfc941a203"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}